# Generated by Django 5.1.8 on 2025-07-12 06:36

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('internal_event_id', models.CharField(editable=False, help_text='Internal identifier for this event', max_length=200, primary_key=True, serialize=False)),
                ('source_event_id', models.CharField(max_length=255)),
                ('source_website', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('event_type', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('internal_level_id', models.CharField(editable=False, help_text='Internal identifier for this level', max_length=200, primary_key=True, serialize=False)),
                ('source_level_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('raw_name', models.CharField(blank=True, max_length=255, null=True)),
                ('level_number', models.IntegerField(blank=True, null=True)),
                ('display_order', models.IntegerField(default=0)),
                ('level_type', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'level',
            },
        ),
        migrations.CreateModel(
            name='CaptchaType',
            fields=[
                ('captcha_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('provider', models.CharField(blank=True, help_text='Captcha service provider', max_length=100)),
                ('api_endpoint', models.URLField(blank=True, help_text='API endpoint for solving', max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Captcha Type',
                'verbose_name_plural': 'Captcha Types',
                'db_table': 'captcha_type',
                'indexes': [models.Index(fields=['name'], name='captcha_typ_name_f29549_idx'), models.Index(fields=['is_active'], name='captcha_typ_is_acti_00cc6e_idx')],
            },
        ),
        migrations.CreateModel(
            name='OptimizationRule',
            fields=[
                ('optimization_rule_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('rule_type', models.CharField(choices=[('block_url', 'Block Specific URL'), ('block_domain', 'Block Domain'), ('block_resource_type', 'Block Resource Type'), ('block_pattern', 'Block URL Pattern')], max_length=20)),
                ('pattern', models.TextField(help_text='URL pattern, domain, or resource type to block')),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.CharField(blank=True, help_text="Category like 'social_media', 'analytics', 'ads'", max_length=50)),
                ('priority', models.IntegerField(default=0, help_text='Higher priority rules are applied first')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Optimization Rule',
                'verbose_name_plural': 'Optimization Rules',
                'db_table': 'optimization_rule',
                'ordering': ['-priority', 'name'],
                'indexes': [models.Index(fields=['rule_type'], name='optimizatio_rule_ty_ab9dbe_idx'), models.Index(fields=['is_active'], name='optimizatio_is_acti_125a3b_idx'), models.Index(fields=['category'], name='optimizatio_categor_ced5df_idx'), models.Index(fields=['priority'], name='optimizatio_priorit_2ec226_idx')],
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('internal_performance_id', models.CharField(editable=False, help_text='Internal identifier for this performance', max_length=200, primary_key=True, serialize=False)),
                ('source_performance_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('performance_datetime_utc', models.DateTimeField()),
                ('seat_map_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('map_width', models.IntegerField(blank=True, null=True)),
                ('map_height', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('event_id', models.ForeignKey(db_column='internal_event_id', on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='scrapers.event')),
                ('levels', models.ManyToManyField(help_text='Levels available for this performance', related_name='performances', to='scrapers.level')),
            ],
            options={
                'db_table': 'performance',
            },
        ),
        migrations.CreateModel(
            name='POSListing',
            fields=[
                ('pos_listing_id', models.AutoField(primary_key=True, serialize=False)),
                ('pos_inventory_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('stubhub_inventory_id', models.CharField(blank=True, help_text='Inventory ID returned from StubHub POS API', max_length=255, null=True, unique=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SPLIT', 'Split')], db_index=True, default='ACTIVE', max_length=20)),
                ('admin_hold_applied', models.BooleanField(default=False, help_text='Whether an admin hold has been applied to this StubHub inventory')),
                ('admin_hold_date', models.DateTimeField(blank=True, help_text='When the admin hold was applied', null=True)),
                ('admin_hold_reason', models.TextField(blank=True, help_text='Reason for applying the admin hold', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('performance', models.ForeignKey(db_column='internal_performance_id', on_delete=django.db.models.deletion.CASCADE, related_name='pos_listings', to='scrapers.performance')),
            ],
            options={
                'db_table': 'pos_listing',
            },
        ),
        migrations.CreateModel(
            name='ProxyProvider',
            fields=[
                ('provider_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Provider name (e.g., 'webshare', 'brightdata')", max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable provider name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Provider description and features')),
                ('base_url', models.URLField(blank=True, help_text="Provider's base URL or API endpoint")),
                ('auth_method', models.CharField(choices=[('basic', 'Basic Authentication'), ('bearer', 'Bearer Token'), ('api_key', 'API Key'), ('custom', 'Custom Authentication')], default='basic', help_text='Authentication method used by this provider', max_length=50)),
                ('supports_rotation', models.BooleanField(default=True, help_text='Provider supports automatic rotation')),
                ('supports_geolocation', models.BooleanField(default=False, help_text='Provider supports geo-location selection')),
                ('supports_session_persistence', models.BooleanField(default=False, help_text='Provider supports session persistence')),
                ('is_active', models.BooleanField(default=True)),
                ('is_available', models.BooleanField(default=True, help_text='Provider is currently available')),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Proxy Provider',
                'verbose_name_plural': 'Proxy Providers',
                'db_table': 'proxy_provider',
                'indexes': [models.Index(fields=['name'], name='proxy_provi_name_e5f6bb_idx'), models.Index(fields=['is_active'], name='proxy_provi_is_acti_28f474_idx'), models.Index(fields=['is_available'], name='proxy_provi_is_avai_c602ae_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProxyConfiguration',
            fields=[
                ('config_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Unique name for this proxy configuration', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of this proxy configuration')),
                ('proxy_type', models.CharField(choices=[('residential', 'Rotating Residential'), ('datacenter', 'Rotating Datacenter'), ('static_residential', 'Static Residential'), ('static_datacenter', 'Static Datacenter'), ('mobile', 'Mobile')], help_text='Type of proxy (residential, datacenter, etc.)', max_length=20)),
                ('host', models.CharField(help_text='Proxy server hostname or IP', max_length=255)),
                ('port', models.PositiveIntegerField(help_text='Proxy server port')),
                ('username', models.CharField(blank=True, help_text='Authentication username', max_length=255)),
                ('password', models.CharField(blank=True, help_text='Authentication password', max_length=255)),
                ('protocol', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('socks4', 'SOCKS4'), ('socks5', 'SOCKS5')], default='http', help_text='Proxy protocol', max_length=10)),
                ('country_code', models.CharField(blank=True, help_text='ISO country code', max_length=2)),
                ('region', models.CharField(blank=True, help_text='Region or state', max_length=100)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100)),
                ('max_concurrent_connections', models.PositiveIntegerField(default=10, help_text='Maximum concurrent connections')),
                ('timeout_seconds', models.PositiveIntegerField(default=30, help_text='Connection timeout in seconds')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Number of retry attempts')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('testing', 'Testing'), ('failed', 'Failed'), ('banned', 'Banned'), ('maintenance', 'Maintenance')], default='inactive', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=1, help_text='Lower number = higher priority')),
                ('response_time_ms', models.PositiveIntegerField(blank=True, help_text='Average response time', null=True)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Success rate percentage', max_digits=5)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('successful_requests', models.PositiveIntegerField(default=0)),
                ('failed_requests', models.PositiveIntegerField(default=0)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('last_failure', models.DateTimeField(blank=True, null=True)),
                ('consecutive_failures', models.PositiveIntegerField(default=0)),
                ('current_connections', models.PositiveIntegerField(default=0)),
                ('bandwidth_used_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(help_text='Proxy provider for this configuration', on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='scrapers.proxyprovider')),
            ],
            options={
                'verbose_name': 'Proxy Configuration',
                'verbose_name_plural': 'Proxy Configurations',
                'db_table': 'proxy_configuration',
            },
        ),
        migrations.CreateModel(
            name='ProxySetting',
            fields=[
                ('proxy_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('proxy_type', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('socks4', 'SOCKS4'), ('socks5', 'SOCKS5')], default='http', max_length=10)),
                ('host', models.CharField(max_length=255)),
                ('port', models.PositiveIntegerField()),
                ('username', models.CharField(blank=True, max_length=255)),
                ('password', models.CharField(blank=True, max_length=255)),
                ('provider_name', models.CharField(blank=True, help_text='Proxy provider name', max_length=100)),
                ('country_code', models.CharField(blank=True, help_text='ISO country code', max_length=2)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('testing', 'Testing'), ('failed', 'Failed'), ('banned', 'Banned'), ('maintenance', 'Maintenance')], default='inactive', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.PositiveIntegerField(default=1, help_text='Lower number = higher priority')),
                ('response_time_ms', models.PositiveIntegerField(blank=True, help_text='Average response time in milliseconds', null=True)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('successful_requests', models.PositiveIntegerField(default=0)),
                ('failed_requests', models.PositiveIntegerField(default=0)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('last_failure', models.DateTimeField(blank=True, null=True)),
                ('consecutive_failures', models.PositiveIntegerField(default=0)),
                ('current_connections', models.PositiveIntegerField(default=0)),
                ('max_connections', models.PositiveIntegerField(default=10)),
                ('bandwidth_used_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Proxy Setting (Legacy)',
                'verbose_name_plural': 'Proxy Settings (Legacy)',
                'db_table': 'proxy_setting',
                'indexes': [models.Index(fields=['status'], name='proxy_setti_status_5c6deb_idx'), models.Index(fields=['is_active'], name='proxy_setti_is_acti_b93266_idx'), models.Index(fields=['priority'], name='proxy_setti_priorit_4cee35_idx'), models.Index(fields=['success_rate'], name='proxy_setti_success_d561b5_idx'), models.Index(fields=['last_health_check'], name='proxy_setti_last_he_267c7b_idx')],
                'unique_together': {('host', 'port')},
            },
        ),
        migrations.CreateModel(
            name='ScrapeJob',
            fields=[
                ('scrape_job_key', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(max_length=100)),
                ('source_website', models.CharField(max_length=255)),
                ('scraper_version', models.CharField(blank=True, max_length=50, null=True)),
                ('scraped_at_utc', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_success', models.BooleanField(default=True)),
                ('http_status', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('raw_payload', models.JSONField(default=dict)),
                ('scraper_config', models.JSONField(default=dict)),
                ('performance_id', models.ForeignKey(db_column='internal_performance_id', on_delete=django.db.models.deletion.CASCADE, related_name='scrape_jobs', to='scrapers.performance')),
            ],
            options={
                'db_table': 'scrape_job',
            },
        ),
        migrations.CreateModel(
            name='ResourceMonitor',
            fields=[
                ('monitor_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(max_length=100)),
                ('cpu_usage_percent', models.DecimalField(decimal_places=2, help_text='CPU usage percentage', max_digits=5)),
                ('memory_usage_mb', models.DecimalField(decimal_places=2, help_text='Memory usage in MB', max_digits=10)),
                ('memory_usage_percent', models.DecimalField(decimal_places=2, help_text='Memory usage percentage', max_digits=5)),
                ('disk_io_read_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('disk_io_write_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('network_download_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('network_upload_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('active_connections', models.PositiveIntegerField(default=0)),
                ('browser_processes', models.PositiveIntegerField(default=0, help_text='Number of browser processes')),
                ('browser_memory_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('page_load_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('requests_per_minute', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('response_time_avg_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('error_rate_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('recorded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_monitors', to='scrapers.scrapejob')),
            ],
            options={
                'verbose_name': 'Resource Monitor',
                'verbose_name_plural': 'Resource Monitors',
                'db_table': 'resource_monitor',
            },
        ),
        migrations.CreateModel(
            name='ProxyUsageLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(help_text='Scraper that used the proxy', max_length=100)),
                ('target_url', models.URLField(help_text='URL that was requested', max_length=2000)),
                ('target_domain', models.CharField(help_text='Domain of the target URL', max_length=255)),
                ('request_method', models.CharField(default='GET', help_text='HTTP method', max_length=10)),
                ('response_status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('response_size_bytes', models.PositiveIntegerField(blank=True, null=True)),
                ('was_successful', models.BooleanField(help_text='Whether the request was successful')),
                ('error_type', models.CharField(blank=True, choices=[('timeout', 'Timeout'), ('connection_error', 'Connection Error'), ('proxy_error', 'Proxy Error'), ('http_error', 'HTTP Error'), ('unknown', 'Unknown Error')], help_text='Type of error if request failed', max_length=50)),
                ('error_message', models.TextField(blank=True, help_text='Detailed error message')),
                ('started_at', models.DateTimeField(help_text='When the request started')),
                ('completed_at', models.DateTimeField(help_text='When the request completed')),
                ('user_agent', models.TextField(blank=True, help_text='User agent used for the request')),
                ('additional_headers', models.JSONField(blank=True, default=dict, help_text='Additional headers used')),
                ('proxy_configuration', models.ForeignKey(help_text='Proxy configuration that was used', on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='scrapers.proxyconfiguration')),
                ('scrape_job', models.ForeignKey(blank=True, help_text='Related scrape job', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proxy_usage_logs', to='scrapers.scrapejob')),
            ],
            options={
                'verbose_name': 'Proxy Usage Log',
                'verbose_name_plural': 'Proxy Usage Logs',
                'db_table': 'proxy_usage_log',
            },
        ),
        migrations.CreateModel(
            name='LevelPriceSnapshot',
            fields=[
                ('snapshot_key', models.AutoField(primary_key=True, serialize=False)),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('available_seats', models.IntegerField(blank=True, null=True)),
                ('total_seats', models.IntegerField(blank=True, null=True)),
                ('sold_seats', models.IntegerField(blank=True, null=True)),
                ('raw_price_text', models.TextField(blank=True, null=True)),
                ('raw_availability_text', models.TextField(blank=True, null=True)),
                ('snapshot_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('level_id', models.ForeignKey(db_column='internal_level_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_snapshots', to='scrapers.level')),
                ('scrape_job_key', models.ForeignKey(db_column='scrape_job_key', on_delete=django.db.models.deletion.CASCADE, related_name='level_price_snapshots', to='scrapers.scrapejob')),
            ],
            options={
                'db_table': 'level_price_snapshot',
            },
        ),
        migrations.CreateModel(
            name='ScraperConfiguration',
            fields=[
                ('config_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(max_length=100)),
                ('configuration_name', models.CharField(help_text='Configuration preset name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('config_data', models.JSONField(default=dict, help_text='Complete scraper configuration')),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('browser_type', models.CharField(default='chrome', help_text='chrome, firefox, safari', max_length=20)),
                ('headless', models.BooleanField(default=True)),
                ('window_size', models.CharField(default='1920x1080', max_length=20)),
                ('user_agent', models.TextField(blank=True)),
                ('page_timeout_seconds', models.PositiveIntegerField(default=30)),
                ('element_timeout_seconds', models.PositiveIntegerField(default=10)),
                ('delay_between_requests_ms', models.PositiveIntegerField(default=1000)),
                ('load_images', models.BooleanField(default=False)),
                ('load_css', models.BooleanField(default=True)),
                ('load_javascript', models.BooleanField(default=True)),
                ('use_proxy', models.BooleanField(default=False)),
                ('proxy_rotation', models.BooleanField(default=False)),
                ('max_retries', models.PositiveIntegerField(default=3)),
                ('retry_delay_seconds', models.PositiveIntegerField(default=5)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Scraper Configuration (Legacy)',
                'verbose_name_plural': 'Scraper Configurations (Legacy)',
                'db_table': 'scraper_configuration',
                'indexes': [models.Index(fields=['scraper_name'], name='scraper_con_scraper_651717_idx'), models.Index(fields=['is_default'], name='scraper_con_is_defa_162d26_idx'), models.Index(fields=['is_active'], name='scraper_con_is_acti_04f70d_idx')],
                'unique_together': {('scraper_name', 'configuration_name')},
            },
        ),
        migrations.CreateModel(
            name='ScraperDefinition',
            fields=[
                ('internal_id', models.CharField(help_text='Internal identifier for this scraper', max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Unique scraper name (e.g., washington_pavilion_scraper)', max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable name for the scraper', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of what this scraper does')),
                ('target_website', models.URLField(help_text='Main website this scraper targets', max_length=500)),
                ('target_domains', models.JSONField(default=list, help_text='List of domains this scraper works with')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('disabled', 'Disabled'), ('testing', 'Testing')], default='active', max_length=20)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this scraper can be used')),
                ('use_proxy', models.BooleanField(default=True, help_text='Whether this scraper should use proxy')),
                ('fail_without_proxy', models.BooleanField(default=True, help_text='Fail scraping if use_proxy=True but no proxy is assigned')),
                ('browser_engine', models.CharField(choices=[('playwright', 'Playwright'), ('selenium', 'Selenium')], default='playwright', help_text='Browser automation engine to use', max_length=20)),
                ('external_chromium_enabled', models.BooleanField(default=False, help_text='Use external Chromium instance')),
                ('external_chromium_url', models.CharField(blank=True, help_text='URL for external Chromium instance (if enabled)', max_length=500)),
                ('headless_mode', models.BooleanField(default=True, help_text='Run browser in headless mode')),
                ('user_agent', models.TextField(blank=True, help_text='Custom user agent string (optional)')),
                ('viewport_width', models.PositiveIntegerField(default=1920, help_text='Browser viewport width')),
                ('viewport_height', models.PositiveIntegerField(default=1080, help_text='Browser viewport height')),
                ('optimization_enabled', models.BooleanField(default=True, help_text='Enable optimization rules for this scraper')),
                ('optimization_level', models.CharField(choices=[('balanced', 'Balanced'), ('aggressive', 'Aggressive'), ('conservative', 'Conservative'), ('minimal', 'Minimal')], default='balanced', help_text='Optimization level for performance tuning', max_length=20)),
                ('timeout_seconds', models.PositiveIntegerField(default=30, help_text='Timeout for scraping operations in seconds')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Number of retry attempts on failure')),
                ('retry_delay_seconds', models.PositiveIntegerField(default=5, help_text='Delay between retry attempts')),
                ('max_concurrent_jobs', models.PositiveIntegerField(default=1, help_text='Maximum concurrent scraping jobs')),
                ('delay_between_requests_ms', models.PositiveIntegerField(default=1000, help_text='Delay between requests in milliseconds')),
                ('captcha_required', models.BooleanField(default=False, help_text='Whether this scraper requires captcha solving')),
                ('prefix', models.CharField(blank=True, help_text="Short prefix identifier for this scraper (e.g., 'wp' for Washington Pavilion)", max_length=10, null=True, unique=True)),
                ('url_prefix', models.CharField(blank=True, help_text="URL prefix for this scraper's operations", max_length=200)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('critical', 'Critical')], default='normal', help_text='Priority level for this scraper', max_length=20)),
                ('enable_screenshots', models.BooleanField(default=False, help_text='Take screenshots during scraping for debugging')),
                ('enable_detailed_logging', models.BooleanField(default=False, help_text='Enable detailed logging for this scraper')),
                ('log_level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error')], default='INFO', max_length=10)),
                ('can_be_scheduled', models.BooleanField(default=True, help_text='Whether this scraper can be scheduled to run automatically')),
                ('schedule_interval_hours', models.PositiveIntegerField(blank=True, help_text='How often to run this scraper (in hours)', null=True)),
                ('custom_settings', models.JSONField(blank=True, default=dict, help_text='Custom settings specific to this scraper')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='admin', help_text='Who created this scraper configuration', max_length=100)),
                ('total_runs', models.PositiveIntegerField(default=0)),
                ('successful_runs', models.PositiveIntegerField(default=0)),
                ('failed_runs', models.PositiveIntegerField(default=0)),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('last_success_at', models.DateTimeField(blank=True, null=True)),
                ('captcha_type', models.ForeignKey(blank=True, help_text='Type of captcha used by this scraper', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scrapers', to='scrapers.captchatype')),
                ('proxy_settings', models.ForeignKey(blank=True, help_text='Proxy configuration to use for this scraper', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_scrapers', to='scrapers.proxyconfiguration')),
            ],
            options={
                'verbose_name': 'Scraper Definition',
                'verbose_name_plural': 'Scraper Definitions',
                'db_table': 'scraper_definition',
            },
        ),
        migrations.CreateModel(
            name='ScraperExecution',
            fields=[
                ('execution_id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('timeout', 'Timeout')], default='pending', max_length=20)),
                ('target_url', models.URLField(max_length=2000)),
                ('proxy_ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('error_type', models.CharField(blank=True, max_length=100)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('memory_usage_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cpu_usage_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('items_extracted', models.PositiveIntegerField(default=0)),
                ('data_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Quality score from 0-100', max_digits=5, null=True)),
                ('screenshot_paths', models.JSONField(default=list, help_text='Paths to screenshots taken during execution')),
                ('log_file_path', models.CharField(blank=True, help_text='Path to detailed log file', max_length=500)),
                ('config_snapshot', models.JSONField(default=dict, help_text='Configuration used for this execution')),
                ('proxy_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executions', to='scrapers.proxyconfiguration')),
                ('scraper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='scrapers.scraperdefinition')),
            ],
            options={
                'verbose_name': 'Scraper Execution',
                'verbose_name_plural': 'Scraper Executions',
                'db_table': 'scraper_execution',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ScraperMetrics',
            fields=[
                ('metrics_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(max_length=100)),
                ('date', models.DateField(help_text='Date for daily metrics')),
                ('hour', models.PositiveIntegerField(blank=True, help_text='Hour for hourly metrics (0-23)', null=True)),
                ('total_runs', models.PositiveIntegerField(default=0)),
                ('successful_runs', models.PositiveIntegerField(default=0)),
                ('failed_runs', models.PositiveIntegerField(default=0)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('avg_runtime_seconds', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('min_runtime_seconds', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('max_runtime_seconds', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_items_scraped', models.PositiveIntegerField(default=0)),
                ('total_venues_processed', models.PositiveIntegerField(default=0)),
                ('total_events_processed', models.PositiveIntegerField(default=0)),
                ('total_seats_processed', models.PositiveIntegerField(default=0)),
                ('avg_cpu_usage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('avg_memory_usage_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_bandwidth_mb', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_errors', models.PositiveIntegerField(default=0)),
                ('timeout_errors', models.PositiveIntegerField(default=0)),
                ('network_errors', models.PositiveIntegerField(default=0)),
                ('parsing_errors', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scraper Metrics',
                'verbose_name_plural': 'Scraper Metrics',
                'db_table': 'scraper_metrics',
                'indexes': [models.Index(fields=['scraper_name'], name='scraper_met_scraper_3bfe93_idx'), models.Index(fields=['date'], name='scraper_met_date_d8b4e4_idx'), models.Index(fields=['success_rate'], name='scraper_met_success_78ed1e_idx'), models.Index(fields=['total_runs'], name='scraper_met_total_r_a72fa3_idx')],
                'unique_together': {('scraper_name', 'date', 'hour')},
            },
        ),
        migrations.CreateModel(
            name='ScraperOptimizationSettings',
            fields=[
                ('setting_id', models.AutoField(primary_key=True, serialize=False)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this rule is enabled for this scraper')),
                ('custom_pattern', models.TextField(blank=True, help_text="Override the rule's default pattern for this scraper")),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('optimization_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraper_settings', to='scrapers.optimizationrule')),
                ('scraper_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimization_settings', to='scrapers.scraperdefinition')),
            ],
            options={
                'verbose_name': 'Scraper Optimization Setting',
                'verbose_name_plural': 'Scraper Optimization Settings',
                'db_table': 'scraper_optimization_settings',
            },
        ),
        migrations.AddField(
            model_name='scraperdefinition',
            name='optimization_rules',
            field=models.ManyToManyField(blank=True, help_text='Optimization rules applied to this scraper', related_name='scrapers', through='scrapers.ScraperOptimizationSettings', to='scrapers.optimizationrule'),
        ),
        migrations.CreateModel(
            name='ScraperProxyAssignment',
            fields=[
                ('assignment_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(help_text='Name of the scraper', max_length=100)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary proxy for this scraper')),
                ('is_fallback', models.BooleanField(default=False, help_text='Fallback proxy if primary fails')),
                ('fallback_order', models.PositiveIntegerField(default=1, help_text='Order of fallback (1=first fallback)')),
                ('max_requests_per_hour', models.PositiveIntegerField(blank=True, help_text='Rate limiting', null=True)),
                ('max_concurrent_requests', models.PositiveIntegerField(default=1, help_text='Concurrent request limit')),
                ('time_restrictions', models.JSONField(blank=True, default=dict, help_text="Time-based restrictions (e.g., {'start_hour': 9, 'end_hour': 17})")),
                ('conditions', models.JSONField(blank=True, default=dict, help_text="Conditions for using this proxy (e.g., {'target_domains': ['example.com']})")),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('proxy_configuration', models.ForeignKey(help_text='Proxy configuration to use for this scraper', on_delete=django.db.models.deletion.CASCADE, related_name='scraper_assignments', to='scrapers.proxyconfiguration')),
                ('scraper_definition', models.ForeignKey(blank=True, help_text='Link to scraper definition (optional for backward compatibility)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proxy_assignments', to='scrapers.scraperdefinition')),
            ],
            options={
                'verbose_name': 'Scraper Proxy Assignment',
                'verbose_name_plural': 'Scraper Proxy Assignments',
                'db_table': 'scraper_proxy_assignment',
            },
        ),
        migrations.CreateModel(
            name='ScraperSchedule',
            fields=[
                ('schedule_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name for this schedule', max_length=200)),
                ('schedule_type', models.CharField(choices=[('interval', 'Interval'), ('cron', 'Cron Expression'), ('once', 'One Time'), ('manual', 'Manual Only')], default='interval', max_length=20)),
                ('interval_hours', models.PositiveIntegerField(blank=True, help_text='Run every X hours', null=True)),
                ('interval_minutes', models.PositiveIntegerField(blank=True, help_text='Run every X minutes', null=True)),
                ('cron_expression', models.CharField(blank=True, help_text='Cron expression for complex scheduling', max_length=100)),
                ('scheduled_for', models.DateTimeField(blank=True, help_text='Specific date/time to run (for one-time execution)', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this schedule is active')),
                ('max_executions', models.PositiveIntegerField(blank=True, help_text='Maximum number of executions (optional)', null=True)),
                ('urls_to_scrape', models.JSONField(default=list, help_text='List of URLs to scrape on each execution')),
                ('executions_count', models.PositiveIntegerField(default=0)),
                ('last_execution_at', models.DateTimeField(blank=True, null=True)),
                ('next_execution_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(default='admin', max_length=100)),
                ('scraper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='scrapers.scraperdefinition')),
            ],
            options={
                'verbose_name': 'Scraper Schedule',
                'verbose_name_plural': 'Scraper Schedules',
                'db_table': 'scraper_schedule',
            },
        ),
        migrations.CreateModel(
            name='ScraperStatus',
            fields=[
                ('status_id', models.AutoField(primary_key=True, serialize=False)),
                ('scraper_name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable scraper name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Scraper description and purpose')),
                ('current_status', models.CharField(choices=[('idle', 'Idle'), ('running', 'Running'), ('paused', 'Paused'), ('error', 'Error'), ('maintenance', 'Maintenance'), ('disabled', 'Disabled')], default='idle', max_length=20)),
                ('health_status', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('warning', 'Warning'), ('critical', 'Critical'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_available', models.BooleanField(default=True, help_text='Whether scraper is available for new jobs')),
                ('total_runs', models.PositiveIntegerField(default=0)),
                ('successful_runs', models.PositiveIntegerField(default=0)),
                ('failed_runs', models.PositiveIntegerField(default=0)),
                ('success_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Success rate percentage', max_digits=5)),
                ('last_run_start', models.DateTimeField(blank=True, null=True)),
                ('last_run_end', models.DateTimeField(blank=True, null=True)),
                ('last_success', models.DateTimeField(blank=True, null=True)),
                ('last_failure', models.DateTimeField(blank=True, null=True)),
                ('average_runtime', models.DurationField(blank=True, help_text='Average scraping runtime', null=True)),
                ('last_error_message', models.TextField(blank=True)),
                ('consecutive_failures', models.PositiveIntegerField(default=0)),
                ('max_consecutive_failures', models.PositiveIntegerField(default=5, help_text='Max failures before auto-disable')),
                ('scraper_version', models.CharField(blank=True, max_length=50)),
                ('configuration', models.JSONField(default=dict, help_text='Scraper-specific configuration')),
                ('enabled_features', models.JSONField(default=list, help_text='List of enabled features')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scraper Status',
                'verbose_name_plural': 'Scraper Statuses',
                'db_table': 'scraper_status',
                'indexes': [models.Index(fields=['scraper_name'], name='scraper_sta_scraper_8fc588_idx'), models.Index(fields=['current_status'], name='scraper_sta_current_a2d477_idx'), models.Index(fields=['health_status'], name='scraper_sta_health__96217f_idx'), models.Index(fields=['is_active'], name='scraper_sta_is_acti_238a1f_idx'), models.Index(fields=['last_run_start'], name='scraper_sta_last_ru_3e4472_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScrapingEvent',
            fields=[
                ('event_id', models.AutoField(primary_key=True, serialize=False)),
                ('external_job_id', models.CharField(help_text='External scrape job ID from NestJS', max_length=100)),
                ('scraper_name', models.CharField(max_length=100)),
                ('event_type', models.CharField(choices=[('scrape_started', 'Scrape Started'), ('extraction_started', 'Data Extraction Started'), ('extraction_completed', 'Data Extraction Completed'), ('processing_started', 'Data Processing Started'), ('processing_completed', 'Data Processing Completed'), ('storage_started', 'Database Storage Started'), ('storage_completed', 'Database Storage Completed'), ('scrape_completed', 'Scrape Completed'), ('scrape_failed', 'Scrape Failed'), ('error_occurred', 'Error Occurred'), ('status_update', 'Status Update'), ('progress_update', 'Progress Update')], max_length=30)),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=10)),
                ('message', models.TextField(help_text='Event description or message')),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('venue', models.CharField(blank=True, max_length=200, null=True)),
                ('event_title', models.CharField(blank=True, max_length=300, null=True)),
                ('items_scraped', models.PositiveIntegerField(blank=True, null=True)),
                ('total_items', models.PositiveIntegerField(blank=True, null=True)),
                ('progress_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('memory_usage_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('error_type', models.CharField(blank=True, max_length=100, null=True)),
                ('error_details', models.TextField(blank=True, null=True)),
                ('stack_trace', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional event-specific data')),
                ('user_id', models.PositiveIntegerField(blank=True, help_text='User who initiated the scrape', null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_job', models.ForeignKey(blank=True, help_text='Related Django scrape job if available', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='scrapers.scrapejob')),
            ],
            options={
                'verbose_name': 'Scraping Event',
                'verbose_name_plural': 'Scraping Events',
                'db_table': 'scraping_event',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('internal_seat_id', models.CharField(editable=False, help_text='Internal identifier for this seat', max_length=200, primary_key=True, serialize=False)),
                ('source_seat_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('row_label', models.CharField(max_length=20)),
                ('seat_number', models.CharField(max_length=20)),
                ('seat_type', models.CharField(blank=True, max_length=50, null=True)),
                ('x_coord', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('y_coord', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('current_status', models.CharField(choices=[('available', 'Available'), ('sold', 'Sold'), ('reserved', 'Reserved'), ('blocked', 'Blocked'), ('unknown', 'Unknown')], default='unknown', help_text='Current availability status from latest scrape', max_length=20)),
                ('current_price', models.DecimalField(blank=True, decimal_places=2, help_text='Current price from latest scrape', max_digits=10, null=True)),
                ('current_fees', models.DecimalField(blank=True, decimal_places=2, help_text='Current fees from latest scrape', max_digits=10, null=True)),
                ('last_updated', models.DateTimeField(blank=True, help_text='When current status was last updated', null=True)),
                ('pos_ticket_id', models.CharField(blank=True, db_index=True, help_text='The individual ticket ID from the POS system', max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_scrape_job', models.ForeignKey(blank=True, help_text='Reference to scrape job that provided current status', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_seat_statuses', to='scrapers.scrapejob')),
                ('pos_listing', models.ForeignKey(blank=True, help_text='The POS listing this seat belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seats', to='scrapers.poslisting')),
            ],
            options={
                'db_table': 'seat',
            },
        ),
        migrations.CreateModel(
            name='SeatSnapshot',
            fields=[
                ('snapshot_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=50)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('raw_status_text', models.CharField(blank=True, max_length=255, null=True)),
                ('raw_price_text', models.CharField(blank=True, max_length=255, null=True)),
                ('raw_fees_text', models.CharField(blank=True, max_length=255, null=True)),
                ('snapshot_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_job_key', models.ForeignKey(db_column='scrape_job_key', on_delete=django.db.models.deletion.CASCADE, related_name='seat_snapshots', to='scrapers.scrapejob')),
                ('seat_id', models.ForeignKey(db_column='internal_seat_id', on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='scrapers.seat')),
            ],
            options={
                'db_table': 'seat_snapshot',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('internal_section_id', models.CharField(editable=False, help_text='Internal identifier for this section', max_length=200, primary_key=True, serialize=False)),
                ('source_section_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('raw_name', models.CharField(blank=True, max_length=255, null=True)),
                ('section_type', models.CharField(blank=True, max_length=100, null=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('level_id', models.ForeignKey(db_column='internal_level_id', on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='scrapers.level')),
            ],
            options={
                'db_table': 'section',
            },
        ),
        migrations.AddField(
            model_name='seat',
            name='section_id',
            field=models.ForeignKey(db_column='internal_section_id', on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='scrapers.section'),
        ),
        migrations.CreateModel(
            name='SectionPriceSnapshot',
            fields=[
                ('snapshot_key', models.AutoField(primary_key=True, serialize=False)),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('available_seats', models.IntegerField(blank=True, null=True)),
                ('total_seats', models.IntegerField(blank=True, null=True)),
                ('sold_seats', models.IntegerField(blank=True, null=True)),
                ('raw_price_text', models.TextField(blank=True, null=True)),
                ('raw_availability_text', models.TextField(blank=True, null=True)),
                ('snapshot_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_job_key', models.ForeignKey(db_column='scrape_job_key', on_delete=django.db.models.deletion.CASCADE, related_name='section_price_snapshots', to='scrapers.scrapejob')),
                ('section_id', models.ForeignKey(db_column='internal_section_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_snapshots', to='scrapers.section')),
            ],
            options={
                'db_table': 'section_price_snapshot',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('internal_venue_id', models.CharField(editable=False, help_text='Internal identifier for this venue', max_length=200, primary_key=True, serialize=False)),
                ('source_venue_id', models.CharField(max_length=255)),
                ('source_website', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=2)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('venue_timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('seat_structure', models.CharField(blank=True, choices=[('odd_even', 'Odd/Even Seating'), ('consecutive', 'Consecutive Seating')], max_length=20, null=True)),
                ('previous_seat_structure', models.CharField(blank=True, choices=[('odd_even', 'Odd/Even Seating'), ('consecutive', 'Consecutive Seating')], help_text='Previous seat structure value for change detection', max_length=20, null=True)),
            ],
            options={
                'db_table': 'venue',
                'indexes': [models.Index(fields=['internal_venue_id'], name='venue_interna_ecff48_idx'), models.Index(fields=['name'], name='venue_name_77c12d_idx'), models.Index(fields=['city', 'state'], name='venue_city_5e2e6c_idx'), models.Index(fields=['is_active'], name='venue_is_acti_3536d3_idx'), models.Index(fields=['source_website'], name='venue_source__e1a347_idx')],
                'unique_together': {('source_venue_id', 'source_website')},
            },
        ),
        migrations.AddField(
            model_name='performance',
            name='venue_id',
            field=models.ForeignKey(db_column='internal_venue_id', help_text='Specific venue where this performance takes place', on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='scrapers.venue'),
        ),
        migrations.AddField(
            model_name='level',
            name='venue_id',
            field=models.ForeignKey(blank=True, db_column='internal_venue_id', help_text='Venue this level belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='scrapers.venue'),
        ),
        migrations.CreateModel(
            name='EventVenue',
            fields=[
                ('event_venue_key', models.AutoField(primary_key=True, serialize=False)),
                ('source_website', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('event_id', models.ForeignKey(db_column='internal_event_id', on_delete=django.db.models.deletion.CASCADE, to='scrapers.event')),
                ('venue_id', models.ForeignKey(db_column='internal_venue_id', on_delete=django.db.models.deletion.CASCADE, to='scrapers.venue')),
            ],
            options={
                'db_table': 'event_venue',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='venues',
            field=models.ManyToManyField(help_text='Venues where this event takes place', related_name='events', through='scrapers.EventVenue', to='scrapers.venue'),
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('internal_zone_id', models.CharField(editable=False, help_text='Internal identifier for this zone', max_length=200, primary_key=True, serialize=False)),
                ('source_zone_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('raw_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('zone_type', models.CharField(blank=True, max_length=100, null=True)),
                ('color_code', models.CharField(blank=True, max_length=7, null=True)),
                ('view_type', models.CharField(blank=True, choices=[('clear', 'Clear View'), ('partial', 'Partial View'), ('obstructed', 'Obstructed View'), ('side', 'Side View'), ('limited', 'Limited View'), ('excellent', 'Excellent View'), ('premium', 'Premium View'), ('standard', 'Standard View')], help_text='View quality from this zone', max_length=20, null=True)),
                ('wheelchair_accessible', models.BooleanField(default=False, help_text='Whether this zone has wheelchair accessible seating')),
                ('miscellaneous', models.JSONField(blank=True, default=dict, help_text='Additional zone information in JSON format')),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('performance_id', models.ForeignKey(db_column='internal_performance_id', on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='scrapers.performance')),
            ],
            options={
                'db_table': 'zone',
            },
        ),
        migrations.CreateModel(
            name='SeatPack',
            fields=[
                ('internal_pack_id', models.CharField(help_text='Deterministic, hashed pack ID', max_length=255, primary_key=True, serialize=False)),
                ('source_pack_id', models.CharField(blank=True, max_length=255, null=True)),
                ('source_website', models.CharField(max_length=255)),
                ('row_label', models.CharField(max_length=20)),
                ('start_seat_number', models.CharField(max_length=20)),
                ('end_seat_number', models.CharField(max_length=20)),
                ('pack_size', models.IntegerField()),
                ('pack_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('seat_keys', models.JSONField(default=list, help_text='JSON array of seat IDs in this pack')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pack is currently available for sale')),
                ('manually_delisted', models.BooleanField(default=False, help_text='If true, automation should not modify this pack')),
                ('creation_event', models.CharField(blank=True, choices=[('create', 'Create'), ('split', 'Split'), ('shrink', 'Shrink'), ('merge', 'Merge')], help_text="How this pack was created (e.g., 'create', 'split', 'shrink', 'merge')", max_length=50, null=True)),
                ('source_pack_ids', models.JSONField(blank=True, default=list, help_text='JSON array of parent pack IDs this pack originated from')),
                ('delist_reason', models.CharField(blank=True, choices=[('transformed', 'Transformed'), ('vanished', 'Vanished'), ('structure_change', 'Structure Change')], help_text="Reason for delisting (e.g., 'transformed', 'vanished')", max_length=50, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(blank=True, db_column='internal_event_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seat_packs', to='scrapers.event')),
                ('level', models.ForeignKey(blank=True, db_column='internal_level_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seat_packs', to='scrapers.level')),
                ('performance', models.ForeignKey(blank=True, db_column='internal_performance_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seat_packs', to='scrapers.performance')),
                ('pos_listing', models.ForeignKey(blank=True, help_text='The POS listing this seat pack belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seat_packs', to='scrapers.poslisting')),
                ('scrape_job_key', models.ForeignKey(db_column='scrape_job_key', on_delete=django.db.models.deletion.CASCADE, related_name='seat_packs', to='scrapers.scrapejob')),
                ('zone_id', models.ForeignKey(db_column='internal_zone_id', on_delete=django.db.models.deletion.CASCADE, related_name='seat_packs', to='scrapers.zone')),
            ],
            options={
                'verbose_name': 'Seat Pack',
                'verbose_name_plural': 'Seat Packs',
                'db_table': 'seat_pack',
            },
        ),
        migrations.AddField(
            model_name='seat',
            name='zone_id',
            field=models.ForeignKey(db_column='internal_zone_id', on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='scrapers.zone'),
        ),
        migrations.CreateModel(
            name='ZonePriceSnapshot',
            fields=[
                ('snapshot_key', models.AutoField(primary_key=True, serialize=False)),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('available_seats', models.IntegerField(blank=True, null=True)),
                ('total_seats', models.IntegerField(blank=True, null=True)),
                ('sold_seats', models.IntegerField(blank=True, null=True)),
                ('raw_price_text', models.TextField(blank=True, null=True)),
                ('raw_availability_text', models.TextField(blank=True, null=True)),
                ('snapshot_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('scrape_job_key', models.ForeignKey(db_column='scrape_job_key', on_delete=django.db.models.deletion.CASCADE, related_name='zone_price_snapshots', to='scrapers.scrapejob')),
                ('zone_id', models.ForeignKey(db_column='internal_zone_id', on_delete=django.db.models.deletion.CASCADE, related_name='price_snapshots', to='scrapers.zone')),
            ],
            options={
                'db_table': 'zone_price_snapshot',
            },
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['provider'], name='proxy_confi_provide_42e2c5_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['proxy_type'], name='proxy_confi_proxy_t_f11d92_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['status'], name='proxy_confi_status_f38983_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['is_active'], name='proxy_confi_is_acti_ddc838_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['priority'], name='proxy_confi_priorit_9a6f59_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['success_rate'], name='proxy_confi_success_6ec71d_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyconfiguration',
            index=models.Index(fields=['last_health_check'], name='proxy_confi_last_he_d2826b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='proxyconfiguration',
            unique_together={('provider', 'name')},
        ),
        migrations.AddIndex(
            model_name='scrapejob',
            index=models.Index(fields=['performance_id'], name='scrape_job_interna_4d0a70_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapejob',
            index=models.Index(fields=['scraper_name'], name='scrape_job_scraper_c74118_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapejob',
            index=models.Index(fields=['source_website'], name='scrape_job_source__d3cfdd_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapejob',
            index=models.Index(fields=['scraped_at_utc'], name='scrape_job_scraped_537d49_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapejob',
            index=models.Index(fields=['scrape_success'], name='scrape_job_scrape__ca7e72_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcemonitor',
            index=models.Index(fields=['scraper_name'], name='resource_mo_scraper_36c334_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcemonitor',
            index=models.Index(fields=['recorded_at'], name='resource_mo_recorde_014ba9_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcemonitor',
            index=models.Index(fields=['scrape_job'], name='resource_mo_scrape__633548_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcemonitor',
            index=models.Index(fields=['cpu_usage_percent'], name='resource_mo_cpu_usa_54c350_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcemonitor',
            index=models.Index(fields=['memory_usage_percent'], name='resource_mo_memory__ab5bf4_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['proxy_configuration'], name='proxy_usage_proxy_c_89f1d9_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['scraper_name'], name='proxy_usage_scraper_80181a_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['target_domain'], name='proxy_usage_target__56bfb7_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['was_successful'], name='proxy_usage_was_suc_6ae3e3_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['started_at'], name='proxy_usage_started_22af82_idx'),
        ),
        migrations.AddIndex(
            model_name='proxyusagelog',
            index=models.Index(fields=['response_status_code'], name='proxy_usage_respons_3cd12a_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['scrape_job_key'], name='level_price_scrape__942c4a_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['level_id'], name='level_price_interna_22b467_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['snapshot_time'], name='level_price_snapsho_486d68_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['level_id', 'snapshot_time'], name='level_price_interna_56e18e_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['min_price'], name='level_price_min_pri_8e2958_idx'),
        ),
        migrations.AddIndex(
            model_name='levelpricesnapshot',
            index=models.Index(fields=['available_seats'], name='level_price_availab_d020c0_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperexecution',
            index=models.Index(fields=['scraper', 'status'], name='scraper_exe_scraper_94b2b1_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperexecution',
            index=models.Index(fields=['started_at'], name='scraper_exe_started_ecb96e_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperexecution',
            index=models.Index(fields=['success'], name='scraper_exe_success_466d38_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperexecution',
            index=models.Index(fields=['proxy_used'], name='scraper_exe_proxy_u_56f0a5_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperoptimizationsettings',
            index=models.Index(fields=['scraper_definition'], name='scraper_opt_scraper_946b40_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperoptimizationsettings',
            index=models.Index(fields=['optimization_rule'], name='scraper_opt_optimiz_1529d0_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperoptimizationsettings',
            index=models.Index(fields=['is_enabled'], name='scraper_opt_is_enab_b6f328_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scraperoptimizationsettings',
            unique_together={('scraper_definition', 'optimization_rule')},
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['internal_id'], name='scraper_def_interna_5446b0_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['name'], name='scraper_def_name_5cc58a_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['prefix'], name='scraper_def_prefix_80e545_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['status'], name='scraper_def_status_d74b5e_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['is_enabled'], name='scraper_def_is_enab_758237_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['browser_engine'], name='scraper_def_browser_a01957_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['priority'], name='scraper_def_priorit_989d92_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperdefinition',
            index=models.Index(fields=['last_run_at'], name='scraper_def_last_ru_735479_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperproxyassignment',
            index=models.Index(fields=['scraper_name'], name='scraper_pro_scraper_fdb465_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperproxyassignment',
            index=models.Index(fields=['proxy_configuration'], name='scraper_pro_proxy_c_4d9f2a_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperproxyassignment',
            index=models.Index(fields=['is_primary'], name='scraper_pro_is_prim_82d991_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperproxyassignment',
            index=models.Index(fields=['is_fallback'], name='scraper_pro_is_fall_421928_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperproxyassignment',
            index=models.Index(fields=['is_active'], name='scraper_pro_is_acti_c6d170_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scraperproxyassignment',
            unique_together={('scraper_name', 'proxy_configuration')},
        ),
        migrations.AddIndex(
            model_name='scraperschedule',
            index=models.Index(fields=['scraper'], name='scraper_sch_scraper_197883_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperschedule',
            index=models.Index(fields=['is_active'], name='scraper_sch_is_acti_ad0362_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperschedule',
            index=models.Index(fields=['next_execution_at'], name='scraper_sch_next_ex_bd95a7_idx'),
        ),
        migrations.AddIndex(
            model_name='scraperschedule',
            index=models.Index(fields=['schedule_type'], name='scraper_sch_schedul_00c009_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['external_job_id'], name='scraping_ev_externa_fa7416_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['scraper_name'], name='scraping_ev_scraper_08c77e_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['event_type'], name='scraping_ev_event_t_549d48_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['severity'], name='scraping_ev_severit_246d2f_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['timestamp'], name='scraping_ev_timesta_dabc86_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['venue'], name='scraping_ev_venue_7255d8_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['user_id'], name='scraping_ev_user_id_5398d1_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingevent',
            index=models.Index(fields=['external_job_id', 'timestamp'], name='scraping_ev_externa_af7da1_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['scrape_job_key'], name='seat_snapsh_scrape__67042f_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['seat_id'], name='seat_snapsh_interna_27c21e_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['status'], name='seat_snapsh_status_5d1852_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['price'], name='seat_snapsh_price_941c7c_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['snapshot_time'], name='seat_snapsh_snapsho_b1ed8e_idx'),
        ),
        migrations.AddIndex(
            model_name='seatsnapshot',
            index=models.Index(fields=['seat_id', 'snapshot_time'], name='seat_snapsh_interna_48f856_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['level_id'], name='section_interna_87056b_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['name'], name='section_name_3b5b70_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['source_website'], name='section_source__5941a0_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['is_active'], name='section_is_acti_82371b_idx'),
        ),
        migrations.AddIndex(
            model_name='section',
            index=models.Index(fields=['display_order'], name='section_display_31d057_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['scrape_job_key'], name='section_pri_scrape__1b746d_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['section_id'], name='section_pri_interna_e9bfc1_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['snapshot_time'], name='section_pri_snapsho_0d9b5b_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['section_id', 'snapshot_time'], name='section_pri_interna_b2efb9_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['min_price'], name='section_pri_min_pri_bff0f1_idx'),
        ),
        migrations.AddIndex(
            model_name='sectionpricesnapshot',
            index=models.Index(fields=['available_seats'], name='section_pri_availab_755ea0_idx'),
        ),
        migrations.AddIndex(
            model_name='performance',
            index=models.Index(fields=['event_id'], name='performance_interna_da685f_idx'),
        ),
        migrations.AddIndex(
            model_name='performance',
            index=models.Index(fields=['venue_id'], name='performance_interna_11fb24_idx'),
        ),
        migrations.AddIndex(
            model_name='performance',
            index=models.Index(fields=['performance_datetime_utc'], name='performance_perform_de5b7c_idx'),
        ),
        migrations.AddIndex(
            model_name='performance',
            index=models.Index(fields=['source_website'], name='performance_source__c61843_idx'),
        ),
        migrations.AddIndex(
            model_name='performance',
            index=models.Index(fields=['is_active'], name='performance_is_acti_a6be8b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='performance',
            unique_together={('event_id', 'venue_id', 'performance_datetime_utc')},
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['venue_id'], name='level_interna_1e637c_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['name'], name='level_name_d8fe4c_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['source_website'], name='level_source__15ec49_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['is_active'], name='level_is_acti_cef1ad_idx'),
        ),
        migrations.AddIndex(
            model_name='level',
            index=models.Index(fields=['display_order'], name='level_display_d668f9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='level',
            unique_together={('venue_id', 'source_level_id', 'source_website')},
        ),
        migrations.AddIndex(
            model_name='eventvenue',
            index=models.Index(fields=['event_id'], name='event_venue_interna_d0efda_idx'),
        ),
        migrations.AddIndex(
            model_name='eventvenue',
            index=models.Index(fields=['venue_id'], name='event_venue_interna_f10e66_idx'),
        ),
        migrations.AddIndex(
            model_name='eventvenue',
            index=models.Index(fields=['source_website'], name='event_venue_source__7b4961_idx'),
        ),
        migrations.AddIndex(
            model_name='eventvenue',
            index=models.Index(fields=['is_active'], name='event_venue_is_acti_81ec38_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventvenue',
            unique_together={('event_id', 'venue_id')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['internal_event_id'], name='event_interna_ea12bc_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['source_event_id', 'source_website'], name='event_source__3af76f_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['name'], name='event_name_4b7217_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_active'], name='event_is_acti_ae1473_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('source_event_id', 'source_website')},
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['performance_id'], name='zone_interna_e3ff3e_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['name'], name='zone_name_430ac7_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['source_website'], name='zone_source__e84c87_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['is_active'], name='zone_is_acti_fc0e76_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['display_order'], name='zone_display_d86ab1_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['view_type'], name='zone_view_ty_8c62cb_idx'),
        ),
        migrations.AddIndex(
            model_name='zone',
            index=models.Index(fields=['wheelchair_accessible'], name='zone_wheelch_df258c_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['zone_id'], name='seat_pack_interna_71fab4_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['scrape_job_key'], name='seat_pack_scrape__f407a4_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['row_label'], name='seat_pack_row_lab_f155d4_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['pack_size'], name='seat_pack_pack_si_362e47_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['source_website'], name='seat_pack_source__d7a95a_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['created_at'], name='seat_pack_created_ee9c70_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['is_active'], name='seat_pack_is_acti_sync_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['manually_delisted'], name='seat_pack_manual_delist_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['creation_event'], name='seat_pack_creation_event_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['updated_at'], name='seat_pack_updated_at_idx'),
        ),
        migrations.AddIndex(
            model_name='seatpack',
            index=models.Index(fields=['is_active', 'manually_delisted'], name='seat_pack_sync_status_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seatpack',
            unique_together={('zone_id', 'row_label', 'start_seat_number', 'end_seat_number', 'scrape_job_key')},
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['section_id'], name='seat_interna_141a4e_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['zone_id'], name='seat_interna_18a600_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['row_label'], name='seat_row_lab_ed6ef2_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['seat_number'], name='seat_seat_nu_9d5c63_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['source_website'], name='seat_source__611c52_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['is_active'], name='seat_is_acti_15423b_idx'),
        ),
        migrations.AddIndex(
            model_name='seat',
            index=models.Index(fields=['current_status'], name='seat_current_a4afd2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seat',
            unique_together={('section_id', 'row_label', 'seat_number')},
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['scrape_job_key'], name='zone_price__scrape__615a21_idx'),
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['zone_id'], name='zone_price__interna_e3c320_idx'),
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['snapshot_time'], name='zone_price__snapsho_900d6a_idx'),
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['zone_id', 'snapshot_time'], name='zone_price__interna_2008c2_idx'),
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['min_price'], name='zone_price__min_pri_b2f92c_idx'),
        ),
        migrations.AddIndex(
            model_name='zonepricesnapshot',
            index=models.Index(fields=['available_seats'], name='zone_price__availab_8d13b6_idx'),
        ),
    ]
